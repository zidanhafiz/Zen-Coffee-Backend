generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String    @id
  username  String    @db.VarChar(100)
  fullName  String    @db.VarChar(255)
  email     String    @db.VarChar(255)
  role      Role      @default(USER)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  address   Address[]
  banks     Bank[]
  cart      Cart?
  order     Order[]
  wishlist  Wishlist?
}

model Product {
  id           String            @id @default(uuid())
  name         String            @db.VarChar(255)
  description  String
  stock        Int
  price        Int
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt
  category     String            @db.VarChar(50)
  banner       BannerItem[]
  userCart     CartItem[]
  comments     ProductComment[]
  images       ProductImage[]
  variants     ProductVariants[]
  userWishlist WishlistItem[]
}

model ProductVariants {
  productId String
  variantId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@id([productId, variantId])
}

model Variant {
  id       String            @id @default(uuid())
  name     String
  products ProductVariants[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductComment {
  id        String         @id @default(uuid())
  comment   String
  rate      Int
  productId String
  images    CommentImage[]
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CommentImage {
  id        String         @id @default(uuid())
  url       String
  commentId String
  comment   ProductComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
}

model Address {
  id          String @id @default(uuid())
  name        String @db.VarChar(255)
  province    String @db.VarChar(255)
  city        String @db.VarChar(255)
  subdistrict String @db.VarChar(255)
  postalCode  Int
  detail      String
  phone       Int
  userId      String
  user        User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bank {
  id      String @id @default(uuid())
  name    String @db.VarChar(255)
  bank    String @db.VarChar(100)
  account String @db.Text
  userId  String
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Wishlist {
  id        String         @id @default(uuid())
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  userId    String         @unique
  user      User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  items     WishlistItem[]
}

model WishlistItem {
  wishlistId String
  productId  String
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  wishlist   Wishlist @relation(fields: [wishlistId], references: [id], onDelete: Cascade)

  @@id([wishlistId, productId])
}

model Cart {
  id         String     @id @default(uuid())
  totalPrice Int        @default(0)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  items      CartItem[]
  order      Order?
}

model CartItem {
  cartId    String
  productId String
  quantity  Int     @default(1)
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([cartId, productId])
}

model Banner {
  id          String       @id @default(uuid())
  name        String       @db.VarChar(100)
  description String
  image       String
  products    BannerItem[]
}

model BannerItem {
  bannerId  String
  productId String
  banner    Banner  @relation(fields: [bannerId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@id([bannerId, productId])
}

model Order {
  id      String      @id @default(uuid())
  status  OrderStatus @default(UNPAYMENT)
  userId  String
  cartId  String      @unique
  cart    Cart        @relation(fields: [cartId], references: [id], onDelete: Cascade)
  user    User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment Payment?
}

model Payment {
  id              String   @id @default(uuid())
  receivedName    String   @db.VarChar(255)
  receivedAccount String   @db.VarChar(255)
  buyerName       String   @db.VarChar(255)
  buyerAccount    String   @db.VarChar(255)
  paymentMethod   String   @db.VarChar(255)
  amount          Int
  paidOff         Boolean  @default(false)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  orderId         String   @unique
  order           Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
}

enum OrderStatus {
  UNPAYMENT
  IN_PROCESS
  DELIVERY
  RECEIVED
  FAILED
}

enum Role {
  USER
  ADMIN
}
